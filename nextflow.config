/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    testPipeline/testimagepreprocessing Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {
    // Input and output paths
    inputDir                   = "/home/mzaz021/BIDSProject/sourcecode/IRTG01" // Path to the DICOM input directory
    bidsDir                    = "/home/mzaz021/BIDSProject/combined4Description/bids_output" // Path to the BIDS output directory
    outputDir                  = "/home/mzaz021/BIDSProject/combined4Description" // Path to the final output directory
    configFile                 = "/home/mzaz021/BIDSProject/code/configPHASEDIFF_B0identifier.json" // Configuration file for dcm2bids
    containerPath_dcm2bids     = "/home/mzaz021/dcm2bids_3.2.0.sif" // Singularity container path for dcm2bids
    singularity_image          = "/home/mzaz021/validator_latest.sif" // Singularity image for BIDS validation
    containerPath_pydeface     = "/home/mzaz021/pydeface_latest.sif" // Singularity container path for PyDeface
    containerPath_mriqc        = "/home/mzaz021/mriqc_24.0.2.sif" // Singularity container path for MRIQC
    containerPath_fmriprep     = "/home/mzaz021/fmriprep_latest.sif" // Singularity container path for fMRIPrep
    FS_LICENSE                 = "/home/mzaz021/freesurfer/license.txt" // FreeSurfer license file path
    datasetDescription         = "/home/mzaz021/dataset_description.json" // Path to the dataset description JSON file
    bidsValidatorLogs          = "${params.outputDir}/bidsValidatorLogs" // Path for storing BIDS validation logs
    defacedOutputDir           = "${params.outputDir}/defaced" // Path to the defaced output directory
    mriqcOutputDir             = "${params.outputDir}/mriQC" // Path to the MRIQC output directory
    fmriprepOutputDir          = "${params.outputDir}/fmriprep" // Path to the fMRIPrep output directory
    workdir                    = '/home/mzaz021/BIDSProject/work' // Path to the work directory
    participantList            = [] // Optional list of participants to process
}
/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    testPipeline/testimagepreprocessing Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {
    // Input and output paths
    inputDir                   = "/home/mzaz021/BIDSProject/sourcecode/IRTG01" // Path to the DICOM input directory
    bidsDir                    = "/home/mzaz021/BIDSProject/combined4Description/bids_output" // Path to the BIDS output directory
    outputDir                  = "/home/mzaz021/BIDSProject/combined4Description" // Path to the final output directory
    configFile                 = "/home/mzaz021/BIDSProject/code/configPHASEDIFF_B0identifier.json" // Configuration file for dcm2bids
    containerPath_dcm2bids     = "/home/mzaz021/dcm2bids_3.2.0.sif" // Singularity container path for dcm2bids
    singularity_image          = "/home/mzaz021/validator_latest.sif" // Singularity image for BIDS validation
    containerPath_pydeface     = "/home/mzaz021/pydeface_latest.sif" // Singularity container path for PyDeface
    containerPath_mriqc        = "/home/mzaz021/mriqc_24.0.2.sif" // Singularity container path for MRIQC
    containerPath_fmriprep     = "/home/mzaz021/fmriprep_latest.sif" // Singularity container path for fMRIPrep
    FS_LICENSE                 = "/home/mzaz021/freesurfer/license.txt" // FreeSurfer license file path
    datasetDescription         = "/home/mzaz021/dataset_description.json" // Path to the dataset description JSON file
    bidsValidatorLogs          = "${params.outputDir}/bidsValidatorLogs" // Path for storing BIDS validation logs
    defacedOutputDir           = "${params.outputDir}/defaced" // Path to the defaced output directory
    mriqcOutputDir             = "${params.outputDir}/mriQC" // Path to the MRIQC output directory
    fmriprepOutputDir          = "${params.outputDir}/fmriprep" // Path to the fMRIPrep output directory
    workdir                    = '/home/mzaz021/BIDSProject/work' // Path to the work directory
    participantList            = [] // Optional list of participants to process
}

// Boilerplate options
params.outdir                 = null
params.publish_dir_mode       = 'copy'
params.email                  = null
params.email_on_fail          = null
params.plaintext_email        = false
params.monochrome_logs        = false
params.hook_url               = null
params.help                   = false
params.version                = false

// Config options
params.config_profile_name    = null
params.config_profile_description = null
params.custom_config_version  = 'master'
params.custom_config_base     = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
params.config_profile_contact = null
params.config_profile_url     = null

// Max resource options
// Defaults only, expecting to be overwritten
params.max_memory             = '8.GB'
params.max_cpus               = 4
params.max_time               = '48.h'

// Schema validation default options
params.validationFailUnrecognisedParams = false
params.validationLenientMode            = false
params.validationSchemaIgnoreParams     = 'genomes,igenomes_base'
params.validationShowHiddenParams       = false
params.validate_params                  = true

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Profile configurations
profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
        nextflow.enable.configProcessNamesValidation = true
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
}

// Set default registry for Apptainer, Docker, Podman, and Singularity
apptainer.registry   = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

// Reporting and logging configuration
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outputDir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outputDir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outputDir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outputDir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

// Manifest information
manifest {
    name            = 'testPipeline/testimagepreprocessing'
    author          = """Mahnaz Azimi"""
    homePage        = 'https://github.com/testPipeline/testimagepreprocessing'
    description     = """Pipeline for converting DICOM to BIDS and preprocessing imaging data"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module-specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min(obj, params.max_cpus as int)
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
